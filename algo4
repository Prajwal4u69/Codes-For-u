 Given a sorted array of positive integers containing few duplicate elements, design an algorithm and 
 implement it using a program to find whether the given key element is present in the array or not. 
 If present, then also find the number of copies of given key. (Time Complexity = O(log n))

#include<bits/stdc++.h>
using namespace std;
int binary_1(int *,int ,int , int );
int binary_2(int *,int ,int , int );
int main()
{
	int n;
	int key,first,second,i,t;
	cout<<"enter test case\n";
	cin>>t;
	while(t--)
	{
		cout<<"enter the size of array\n";
		cin>>n;
		int array[n];
		cout<<"enter element\n";
		for(i=0;i<n;i++)
		cin>>array[i];
		
		cout<<"enter the key\n";
		cin>>key;
			
		first=binary_1(array,key,0,n-1);
		second=binary_2(array,key,first,n-1);
		
		if(array[first]!=key)
		cout<<"element do not exist\n";
		else	
		cout<<key<<" -> "<<second-first+1<<endl;
	}
}



int binary_1(int *a,int key,int l, int r)
{
	int mid;
	while(l<r)
	{
		mid=(l+r)/2;
		
		if(a[mid]==key&&a[mid-1]==key)
		{
			r=mid-1;
		}
		else if(a[mid]>key)
		{
			r=mid-1;
		}
		else if(a[mid]<key)
		{
			l=mid+1;
		}
		else if(a[mid]==key&&a[mid-1]!=key)
		return mid;
	}
	return r;

}
int binary_2(int *a,int key,int l, int r)
{
	int mid;
	while(l<r)
	{
		mid=(l+r)/2;
		
		if(a[mid]==key&&a[mid+1]==key)
		{
			l=mid+1;
		}
		else if(a[mid]>key)
		{
			r=mid-1;
		}
		else if(a[mid]<key)
		{
			l=mid+1;
		}
		else if(a[mid]==key&&a[mid+1]!=key)
		return mid;
	}	
	return l;
}
