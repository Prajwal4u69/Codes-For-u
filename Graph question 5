#include<bits/stdc++.h>
using namespace std;



int find_path(int *parent,int i,int *adj_matrix,int vertex)
{
	if(parent[i]==i)
	{	cout<<i+1<<" : ";
		return 0;
	}
	else
	{	cout<<i+1;
		return(        find_path(parent,parent[i],adj_matrix,vertex)           +(*(adj_matrix + parent[i]*vertex +  i)));
	}
}
int find_min(int *key,int vertex,int *visited)
{
	int i,min=INT_MAX,pos=0;
	for(i=0;i<vertex;i++)
	{
		if(key[i]<min&&visited[i]==0)
		{
			min=key[i];
			pos=i;
		}

	}
	return pos;
}
int shortest_path(int *adj_matrix,int vertex,int *key,int *parent,int *visited)
{
	int count=0,current=0,j;
	key[current]=0;
	while(count!=vertex)
	{
		current=find_min(key,vertex,visited);
		visited[current]=1;
		count++;
		for(j=0;j<vertex;j++)
		{
			if(((*(adj_matrix + current*vertex + j))>0) && (visited[j]==0))
			{
				if(key[j] > ((*(adj_matrix + current*vertex + j))+key[current]))
				{
					key[j]=(*(adj_matrix + current*vertex + j))+key[current];
					parent[j]=current;
				}
			}
		}
	}

}
int main()
{
	int source,vertex,destination;
	cin>>vertex;

	int adj_matrix[vertex][vertex];
	int i=0,j=0;
	int key[vertex],parent[vertex],visited[vertex]={0};

	for(i=0;i<vertex;i++)
	{
		parent[i]=i;
		key[i]=INT_MAX;
	}

	for(i=0;i<vertex;i++)
		for(j=0;j<vertex;j++)
			cin>>adj_matrix[i][j];
	shortest_path(&adj_matrix[0][0],vertex,key,parent,visited);

	cout<<endl;

	//for(i=0;i< vertex;i++)
	//	cout<<parent[i]<<" ";

	for(i=0;i<vertex;i++)
	cout<<find_path(parent,i,&adj_matrix[0][0],vertex)<<endl;

}

