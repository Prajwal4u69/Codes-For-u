//bellmanford complexity 0(E*V)
#include<bits/stdc++.h>
using namespace std;
int print_path(int *parent,int *adj_matrix,int vertex,int i)
{
	if(parent[i]==i)
	{	
		return 0;
	}
	else
	{
		cout<<i+1;
		return(print_path(parent,adj_matrix,vertex,parent[i])+              (*(adj_matrix + parent[i] * vertex + i)));
	}
}
int main()
{
	int vertex,i,j,k;
	cin>>vertex;
	
	int adj_matrix[vertex][vertex],key[vertex],parent[vertex];

	for(i=0;i<vertex;i++)
		for(j=0;j<vertex;j++)
			cin>>adj_matrix[i][j];

	
	for(i=0;i<vertex;i++)
	{
		key[i]=INT_MAX;
		parent[i]=i;
	}
	int source=0;
	key[source]=0;

	for(k=1;k<=vertex-1;k++)
	{

	for(i=0;i<vertex;i++)
		for(j=0;j<vertex;j++)
		{
			if(adj_matrix[i][j]>0)
			{
				if(key[j]>(adj_matrix[i][j]+key[i]))
				{
					key[j]=adj_matrix[i][j]+key[i];
					parent[j]=i;
				}
			}
		}
	}

	for(i=0;i<vertex;i++)
	{	
		k=print_path(parent,&adj_matrix[0][0],vertex,i);
		cout<<source+1<<" : "<<k<<endl;
		//cout<<parent[i]<<" ";
	}	
}
