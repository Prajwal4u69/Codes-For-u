#include<bits/stdc++.h>
using namespace std;
int find_path(int *adj_matrix,int vertex)
{
	int color[vertex],bipartite_color[vertex];
	int i,u,source,current=0,j;
	
	queue <int> q;
	source=0;
	for(i=0;i<vertex;i++)
	{
		color[i]=0;
		bipartite_color[i]=-1;
	}
	q.push(source);
	color[source]=1;
	bipartite_color[source]=current;

	while(q.empty()==0)
	{
		u=q.front();
		q.pop();

		current=!bipartite_color[u];

		for(j=0;j<vertex;j++)
		{
			if(color[j]==0&&(*(adj_matrix + u*vertex + j ))==1)
			{
				q.push(j);
				color[j]=1;
				bipartite_color[j]=current;
			}
			else if(((*(adj_matrix + u*vertex + j ))==1) && (bipartite_color[j]==bipartite_color[u]))
			{
				return 0;
			}
		}
		color[u]=3;
	}
	return 1;




}
int main()
{
	int source,vertex,destination;
	cin>>vertex;

	int adj_matrix[vertex][vertex];
	int i=0,j=0;

	for(i=0;i<vertex;i++)
		for(j=0;j<vertex;j++)
			cin>>adj_matrix[i][j];


	if(find_path(&adj_matrix[0][0],vertex)==0)
		cout<<"Not Bipartite Graph\n";
	else
		cout<<"Bipartite Graph\n";
}

