/*
Given an unsorted array of integers, design an algorithm and a program to sort the array using
insertion sort. Your program should be able to find number of comparisons and shifts ( shifts -
total number of times the array elements are shifted from their place) required for sorting the
array.
*/
#include<bits/stdc++.h>
#include<stdlib.h>
using namespace std;
void insertion_sort(int *,int,int *,int*,int *);
int main()
{
    int n,*a,swap=0,shift=0,compare=0;
    cout<<"enter the no of elements\n";
    cin>>n;
    
    a=(int*)malloc(sizeof(int)*n);
    cout<<"enter the elements\n";
    for(int i=0;i<n;i++)
    cin>>a[i];
    
    insertion_sort(a,n,&swap,&compare,&shift);
    
    for(int i=0;i<n;i++)
    cout<<a[i]<<" ";
    
    cout<<"\nnumber of compare :"<<compare<<"\nnumber of shift :"<<shift<<"\nnumber of swap :"<<shift;
}

void insertion_sort(int *a,int n,int *swap,int *compare,int *shift)
{
    int i,j,tp,temp,flag=0;
    for(i=0;i<=n-2;i++)
    {   j=i;
        temp=a[j+1];
        //*compare=*compare+1;
        while((*compare)++&&a[j]>temp&&j>=0)
        {   flag=1; 
            (*shift)++;
            a[j+1]=a[j];
            j--;
        }
        if(flag==1)
        {
            a[j+1]=temp;
            (*swap)++;
            flag=0;
        }
    }
}

